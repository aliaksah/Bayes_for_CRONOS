---
title: "Analysis: bodyfat prediction"
author:
  - name: Georg Heinze
    affiliation: Medical University of Vienna, Center for Medical Data Science
date: last-modified                            # "`r Sys.Date()`" for system date
categories: [2024, Contrast-Bayes-Frequentist, STRATOS, R]
description: "Classification: confidential"
editor: visual
theme: cosmo                                   # cosmo bootswatch theme
toc: true                                      # table of contents  
number-sections: true
colorlinks: true                               # ??
highlight-style: pygments
#bibliography: references.bib
format:
  html: 
    code-fold: true
    code-tools: true
    html-math-method: katex
    self-contained: true                      # html is self-contained
  pdf:
    geometry: 
      - top=30mm
      - left=30mm
  docx: default                               
---

## Load libraries

```{r}
library(mfp2)

library(here)
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyselect)
library(gt)
library(gtExtras)
library(patchwork)
library(Hmisc)
library(sjlabelled)
```

# Model estimation

## Load data

```{r}
load("Datafiles/bodyfatdata.Rdata")
```

## Initial data analysis for women data

The description of the IDA plan follows the example in [Regression without regrets](https://stratosida.github.io/regression-regrets/) which accompanies the paper of [Heinze et al (2024)](https://doi.org/10.21203/rs.3.rs-3580334/v1).

### Prerequisites

#### PRE1: research aim

We fit a prediction model for bodyfat using anthropometric measures.

#### PRE2: analysis strategy

The analysis strategy is described in the [Task document](Task%20Bodyfat.html).

#### PRE3: analysis ready data dictionary

The source data dictionary of the college women bodyfat data set is described in the [Task document](Task%20Bodyfat.html).

Here we transform the data into long format for purpose of conducting IDA efficiently.

```{r}
## transform
women_long <-
  women |>
  mutate(AgeP = Age) |>  ## Create a copy of AGE to store as a predictor
  pivot_longer(
    cols = c(-Obs,-Age,-Fat),
    names_to = "PARAMCD",
    values_to = "AVAL",
    values_drop_na = FALSE
  ) |>
  mutate(PARAMCD = if_else(PARAMCD == "AgeP", "Age", PARAMCD)) ## rename AGE param code 

```

#### PRE4: domain expertise

-   Age is chosen as the single structural variable.

-   Waist, Height and Weight are the key predictors for IDA.

-   Fat is the dependent variable.

-   All other predictors (BMI, Neck, Chest, Calf, Biceps, Hips, Waist, Forearm, PThigh, MThigh, DThigh, Wrist, Knee, Elbox, Ankle) take on the role of remaining predictor variables.

### IDA domain M: missing values

There are no missing values in this data set.

### IDA Domain U: univariate descriptions

Since there only continuous predictors and a continuous outcome variable involved, we will only consider subdomain U2: continuous variables.

#### Structural variable and key predictors

```{r uni02, message=FALSE, warning =FALSE , echo=FALSE}
#| layout-ncol: 3
#| fig-width: 4
#| fig-height: 2


source("R/U2-cont-describe-plot.R")





key_plts <- lapply(c("Age", "Waist", "Weight", "Height"), function(X) {
  dat <- women_long |>
    filter(PARAMCD == X) 
  describe_plot(dat, num_bins=20)
})

for (plts in 1:length(key_plts)) {
  print(key_plts[[plts]])
}

```

#### Remaining predictors

```{r}
#| layout-ncol: 3
#| fig-width: 4
#| fig-height: 2


rem_plts <- lapply(c("BMI", "Neck", "Chest", "Calf", "Biceps", "Hips", "Waist", "Forearm", "PThigh", "MThigh", "DThigh", "Wrist", "Knee", "Elbow", "Ankle"), function(X) {
  dat <- women_long |>
    filter(PARAMCD == X) 
  describe_plot(dat, num_bins=20)
})

for (plts in 1:length(rem_plts)) {
  print(rem_plts[[plts]])
}


```





### IDA domain V: multivariate descriptions

#### Key predictors vs. structural variable



```{r}
library(tidyr)
library(dplyr)
library(ggplot2)
library(purrr)
library(tidyselect)
library(corrr) ## tidy correlation
library(patchwork)
library(ggpubr)
library(ggrepel)
library(here)
library(dendextend)
library(gt)
library(gtExtras)

## for network plot
options(ggrepel.max.overlaps = 100)

source("R/fun_compare_dist_plot.R")
source("R/fun_compare_mult_dists.R")
source("R/fun_ida_trans.R")

women_long <- women_long %>%
  mutate(AGE = Age, SEXC = "female", PARAM = PARAMCD) 

key_plts <- lapply(c("Waist", "Weight", "Height"), function(X) {
  dat <- women_long |>
    filter(PARAMCD == X) 
  plot_assoc_by(dat)
})

for (plts in 1:length(key_plts)) {
  print(key_plts[[plts]])
}

```

#### Remaining predictors vs. structural variable

```{r}
key_plts <- lapply(c("BMI", "Neck", "Chest", "Calf", "Biceps", "Hips", "Waist", "Forearm", "PThigh", "MThigh", "DThigh", "Wrist", "Knee", "Elbow", "Ankle"), function(X) {
  dat <- women_long |>
    filter(PARAMCD == X) 
  plot_assoc_by(dat)
})

for (plts in 1:length(key_plts)) {
  print(key_plts[[plts]])
}
```

#### Summary of IDA

There seem to be some mismeasured data points in the following variables:

| Subject | Variable | Problem | Solution |
|---------|----------|---------|----------|
| 120     | Age      | Age == 1| set to NA|
| 42, 145 | Chest    | Chest < 60| set to NA |
| 31      | Calf     |  Calf == 66 | set to NA |
| 124     | Knee     | Knee ==24.7 | set to NA |
| 136     | Elbow    | Elbow == 15.5 | set to NA |
 

```{r}
# we first copy the data into an analysis set women_AS
women_AS <- women

# we now create NAs where data was implausible
women_AS$Age[women_AS$Age ==1] <- NA
women_AS$Chest[women_AS$Chest < 60] <- NA
women_AS$Calf[women_AS$Calf == 66] <- NA
women_AS$Knee[women_AS$Knee ==24.7] <-  NA
women_AS$Elbow[women_AS$Elbow == 15.5] <- NA
```
 
After this data cleaning, we repeat the IDA with the clean data. 
Since the missing values are not overlapping, we don't have to pay special attention to their description.

```{r}
## transform
women_long_AS <-
  women_AS |>
  mutate(AgeP = Age) |>  ## Create a copy of AGE to store as a predictor
  pivot_longer(
    cols = c(-Obs,-Age,-Fat),
    names_to = "PARAMCD",
    values_to = "AVAL",
    values_drop_na = FALSE
  ) |>
  mutate(PARAMCD = if_else(PARAMCD == "AgeP", "Age", PARAMCD)) ## rename AGE param code 

```

#### IDA domain U: univariate descriptions

```{r uni03, message=FALSE, warning =FALSE , echo=FALSE}
#| layout-ncol: 3
#| fig-width: 4
#| fig-height: 2


source("R/U2-cont-describe-plot.R")





key_plts <- lapply(c("Age", "Waist", "Weight", "Height"), function(X) {
  dat <- women_long_AS |>
    filter(PARAMCD == X) 
  describe_plot(dat, num_bins=20)
})

for (plts in 1:length(key_plts)) {
  print(key_plts[[plts]])
}


rem_plts <- lapply(c("BMI", "Neck", "Chest", "Calf", "Biceps", "Hips", "Waist", "Forearm", "PThigh", "MThigh", "DThigh", "Wrist", "Knee", "Elbow", "Ankle"), function(X) {
  dat <- women_long_AS |>
    filter(PARAMCD == X) 
  describe_plot(dat, num_bins=20)
})

for (plts in 1:length(rem_plts)) {
  print(rem_plts[[plts]])
}


```

 #### IDA domain V: Correlation between predictors
 
 Calculate correlation matrix using Spearman correlation coefficient. 

```{r mcorrs, message=FALSE, warning=FALSE, echo=FALSE, fig.height=3}

## tidy parameters in to a wide data set

## calculate corr matrix using spearman cc
corr_spearman <- 
  women_AS |> 
  select(-Obs, -Fat) |>
  correlate(use = "pairwise.complete.obs",
            method = "spearman",
            diagonal = NA)


```

The Spearman correlation coefficients are depicted in a quadratic heat map:

```{r plotcorr, message=FALSE, warning=FALSE, echo=FALSE, fig.width = 16, fig.height=16}


corr_spearman |> rearrange(method = "HC") |>
  autoplot(
#         method = "PCA",
         triangular = "lower",
         barheight = 20) +
  theme(
    axis.text.x = ggplot2::element_text(angle = 45, vjust = 1, hjust = 1, size = 8),
    axis.text.y = ggplot2::element_text(vjust = 1, hjust = 1, size = 9)
  )

```

```{r}
corr_spearman_disp <- cbind(term=corr_spearman$term, round(corr_spearman[,-1]*100,0))
print(corr_spearman_disp)
```

### Plot of the variables PThigh, MThigh, DThigh

```{r}
ggplot(data=women_AS, aes(x=PThigh, y=MThigh)) + geom_point()
ggplot(data=women_AS, aes(x=PThigh, y=DThigh)) + geom_point()
ggplot(data=women_AS, aes(x=DThigh, y=MThigh)) + geom_point()
```


### Summary from IDA

We see very high correlations between all variables except of Age (which has a small range anyway). Moreover, BMI does not seem to have any correlation with Height.

The key predictors Waist, Weight and Height have correlations of:

- Waist and Weight: 0.87
- Waist and Height: 0.18
- Weight and Height: 0.44

## Main analysis

### Model M1

```{r}
library(mfp2)

x <- as.matrix(women_AS[, c("Waist", "Height", "Weight")])
y <- as.numeric(women_AS$Fat)

M1 <- mfp2(x=x, y=y, select=1, df=4, criterion="aic")
summary(M1)
```
```{r}
x <- as.matrix(women_AS[, c("Waist", "Height", "Weight", "BMI")])
y <- as.numeric(women_AS$Fat)

M2 <- mfp2(x=x, y=y, df=c(4,4,4,2), criterion="aic", keep=c(T, T, T, F))
summary(M2)

```
```{r}
# refit M2
women_AS_nona <- women_AS[complete.cases(women_AS),]

# instead of forward, use backward but keep Waist, Height and Weight from exclusion

xM3 <- as.matrix(women_AS_nona[,-c(1,2,5)])
yM3 <- women_AS_nona[,2]

M3 <- mfp2(y=yM3, x=xM3, keep=c("Height","Weight","Waist"), df=c(4, 4, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2))
summary(M3)
```
```{r}
# refit M3 with complete cases

women_AS_M3 <- women_AS[complete.cases(women_AS[,c("Height","Waist","Knee","Hips","Weight","Wrist")]),]

xM3r <- as.matrix(women_AS_M3[,c("Height","Waist","Knee","Hips","Weight","Wrist")])
yM3r <- women_AS_M3[,"Fat"]
M3.refit <- mfp2(y=yM3r, x=xM3r, keep=c("Height","Waist","Knee","Hips","Weight","Wrist"), df=c(4, 4, 2, 2, 4, 2))
summary(M3.refit)

M4.fp1 <- mfp2(y=yM3r, x=xM3r, keep=NULL, select=0.084, df=c(2, 2, 2, 2, 2, 2), cycles=1)

summary(M4.fp1)

M4.lin <- mfp2(y=yM3r, x=xM3r, keep=NULL, select=0.084, df=c(1, 1, 1, 1, 1, 1), cycles=1)

summary(M4.lin)
```

## SAP amendments

### Problems encountered

- forward selection not possible with mfp2
 

### Solutions

- Because forward selection is not possible with the `mfp2` package, we performed backward selection to arrive at model M3.

- M3 selected 6 variables which had to be reduced to 5 for M4. In M3 there were only linear effects involved. When performing backward elimination to remove 1 variable, we assumed these linear effects, but backed up with assuming FP1s for all variables.


# Model validation

## Apparent validity

### Check local bias


```{r}
ggplot(data.frame(fitted.values=M4.fp1$fitted.values, y=M4.fp1$y), aes(x=fitted.values, y=y)) + geom_point() + geom_smooth() + geom_abline(slope=1, intercept=0)
```
Observation: There seems to be only little local bias at the very lower end of the distribution of fitted values.

### Check heteroskedasticity

```{r}
ggplot(data.frame(fitted.values=M4.fp1$fitted.values, y=sqrt(abs(M4.fp1$residuals))), aes(x=fitted.values, y=y)) + geom_point() + geom_smooth() 
```
Observation: there is a little bit of higher variability of residuals when predictions are around 15%.

### Check association with excluded predictors

The MFP algorithm iteratively checks for possible inclusion of previously excluded predictors. Hence, we do not expect that any predictor might show an relevant association with the model residuals. Still, we will check this for Weight, which was excluded when moving from M3 to M4.

```{r}
ggplot(data.frame(Weight=women_AS_M3$Weight, Residuals=M4.fp1$residuals), aes(x=Weight, y=Residuals)) + geom_point() + geom_smooth() 
```
Observation: No residual association with Weight can be noted.

### Check normality of residuals

```{r}
ggplot(data.frame(residuals=M4.fp1$residuals), aes(sample=residuals)) +
  stat_qq(distribution = qnorm) +
  stat_qq_line(distribution = qnorm)

ggplot(data=data.frame(residuals=M4.fp1$residuals), aes(x=residuals)) + geom_histogram(bins=20)
```

Conclusion: there are only little deviations from the normality assumption for residuals, probably more on the left tail.

